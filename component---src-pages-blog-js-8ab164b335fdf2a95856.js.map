{"version":3,"file":"component---src-pages-blog-js-8ab164b335fdf2a95856.js","mappings":"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","sources":["webpack://my-gatsby-blog/./src/components/Post.js","webpack://my-gatsby-blog/./src/components/Posts.js","webpack://my-gatsby-blog/./src/components/BlogSidebar.js","webpack://my-gatsby-blog/./src/components/SidebarLayout.js","webpack://my-gatsby-blog/./src/pages/blog.js","webpack://my-gatsby-blog/./src/utils/hooks/useGetTaxonomies.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport {\n  georgianToPersianDigits,\n  getFormattedDate,\n  monthsEnum,\n} from \"../utils/helpers\";\n\nexport const Post = ({ node, prefix, newspaper }) => {\n  let formattedDate;\n\n  if (node.date) {\n    if (!newspaper) {\n      const dateArr = node.date.split(\"/\");\n      formattedDate =\n        parseInt(dateArr[2]) + \" \" + monthsEnum[parseInt(dateArr[1])];\n    } else {\n      formattedDate = getFormattedDate(node.date);\n    }\n  }\n  return (\n    <Link to={node.slug} key={node.id} className=\"post\">\n      <h3>{node.shortTitle}</h3>\n      <time>{georgianToPersianDigits(formattedDate)}</time>\n    </Link>\n  );\n};\n","import React, { useMemo } from \"react\";\n\nimport { Post } from \"./Post\";\nimport { georgianToPersianDigits } from \"../utils/helpers\";\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n  ...props\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {};\n\n    data.forEach((post) => {\n      const year = post.date?.split(\"/\")[0];\n\n      collection[year] = [...(collection[year] || []), post];\n    });\n\n    return collection;\n  }, [data]);\n  const years = useMemo(\n    () => Object.keys(postsByYear).reverse(),\n    [postsByYear]\n  );\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year} className=\"segment\">\n        <h2 className=\"year\">{georgianToPersianDigits(year)}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ));\n  } else {\n    return (\n      <div className={props.newspaper ? \"posts newspaper\" : \"posts\"}>\n        {data.map((node) => {\n          return (\n            <Post\n              key={node.id}\n              node={node}\n              query={query}\n              prefix={prefix}\n              hideDate={hideDate}\n              yearOnly={yearOnly}\n              {...props}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n};\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\nimport { useGetTaxonomies } from '../utils/hooks/useGetTaxonomies'\n\nexport const BlogSidebar = () => {\n  const data = useGetTaxonomies()\n  const categories = data.categories.group\n  const tags = data.tags.group\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-card\">\n        <h2>دسته بندی ها</h2>\n        <div className=\"list\">\n          {categories\n            .filter((category) => category.name !== 'Highlight')\n            .map((category) => {\n              return (\n                <Link\n                  key={category.name}\n                  to={`/categories/${slugify(category.name)}`}\n                  className=\"category\"\n                  activeClassName=\"active\"\n                >\n                  <div className=\"name\">{category.name}</div>\n                  <div className=\"count\">{category.totalCount}</div>\n                </Link>\n              )\n            })}\n        </div>\n      </div>\n\n      <div className=\"post-sidebar-card\">\n        <h2>تگ‌ها</h2>\n        <div className=\"tags\">\n          {tags.map((tag) => {\n            return (\n              <Link\n                key={tag.name}\n                to={`/tags/${slugify(tag.name)}`}\n                className=\"tag\"\n                activeClassName=\"active\"\n              >\n                {tag.name}\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </aside>\n  )\n}\n","import React from 'react'\n\nimport { BlogSidebar } from './BlogSidebar'\n\nexport const SidebarLayout = ({ children }) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <BlogSidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import React, { useMemo } from 'react'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/Layout'\nimport { Posts } from '../components/Posts'\nimport { SEO } from '../components/SEO'\nimport { SidebarLayout } from '../components/SidebarLayout'\nimport config from '../utils/config'\nimport { graphql } from 'gatsby'\nimport { getSimplifiedPosts } from '../utils/helpers'\n\nexport default function Blog({ data }) {\n  const posts = data.posts.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts]);\n  const title = 'بلاگ'\n  const description = 'یادداشت ها و آموزش‌ها'\n\n  return (\n    <div>\n      <Helmet title={`${title} | ${config.siteTitle}`} />\n      <SEO customDescription={description} />\n\n      <SidebarLayout>\n        <header className=\"hero\">\n          <h1>{title}</h1>\n        </header>\n        <Posts data={simplifiedPosts} showYears />\n      </SidebarLayout>\n    </div>\n  )\n}\n\nBlog.Layout = Layout\n\nexport const blogQuery = graphql`\nquery MyQuery {\n  posts: allMarkdownRemark(limit: 10, sort: {frontmatter: {date: DESC}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          categories\n          slug\n          shortTitle\n          title\n          date\n        }\n      }\n    }\n  }\n}`\n","import { useStaticQuery, graphql } from 'gatsby'\n\nexport const useGetTaxonomies = () => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n"],"names":["Post","formattedDate","node","prefix","newspaper","date","getFormattedDate","dateArr","split","parseInt","monthsEnum","Link","to","slug","key","id","className","shortTitle","georgianToPersianDigits","Posts","data","showYears","query","hideDate","yearOnly","props","postsByYear","useMemo","collection","forEach","post","year","years","Object","keys","reverse","map","BlogSidebar","useGetTaxonomies","categories","group","tags","filter","category","name","slugify","activeClassName","totalCount","tag","SidebarLayout","children","Blog","posts","edges","simplifiedPosts","getSimplifiedPosts","title","config","customDescription","Layout","useStaticQuery"],"sourceRoot":""}