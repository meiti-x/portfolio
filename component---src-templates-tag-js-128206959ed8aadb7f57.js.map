{"version":3,"file":"component---src-templates-tag-js-128206959ed8aadb7f57.js","mappings":"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","sources":["webpack://my-gatsby-blog/./src/components/Hero.js","webpack://my-gatsby-blog/./src/components/Post.js","webpack://my-gatsby-blog/./src/components/Posts.js","webpack://my-gatsby-blog/./src/components/BlogSidebar.js","webpack://my-gatsby-blog/./src/components/SidebarLayout.js","webpack://my-gatsby-blog/./src/templates/tag.js","webpack://my-gatsby-blog/./src/utils/hooks/useGetTaxonomies.js"],"sourcesContent":["import React from 'react'\n\nexport const Hero = ({ highlight, subTitle, title, children, index }) => {\n  return (\n    <header className={`hero ${index ? 'index' : ''}`}>\n      {subTitle && (\n        <div className=\"sub-title\">\n          {highlight && <span className=\"highlight\">{highlight}</span>}\n          {subTitle}\n        </div>\n      )}\n      {title && <h1>{title}</h1>}\n      {children && children}\n    </header>\n  )\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport {\n  georgianToPersianDigits,\n  getFormattedDate,\n  monthsEnum,\n} from \"../utils/helpers\";\n\nexport const Post = ({ node, prefix, newspaper }) => {\n  let formattedDate;\n  console.log(node);\n  if (node.date) {\n    if (!newspaper) {\n      const dateArr = node.date.split(\"/\");\n      formattedDate =\n        parseInt(dateArr[2]) + \" \" + monthsEnum[parseInt(dateArr[1])];\n    } else {\n      formattedDate = getFormattedDate(node.date);\n    }\n  }\n  return (\n    <Link to={node.slug} key={node.id} className=\"post\">\n      <h3>{node.shortTitle}</h3>\n      <time>{georgianToPersianDigits(formattedDate)}</time>\n    </Link>\n  );\n};\n","import React, { useMemo } from \"react\";\n\nimport { Post } from \"./Post\";\nimport { georgianToPersianDigits } from \"../utils/helpers\";\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n  ...props\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {};\n\n    data.forEach((post) => {\n      const year = post.date?.split(\"/\")[0];\n\n      collection[year] = [...(collection[year] || []), post];\n    });\n\n    return collection;\n  }, [data]);\n  const years = useMemo(\n    () => Object.keys(postsByYear).reverse(),\n    [postsByYear]\n  );\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year} className=\"segment\">\n        <h2 className=\"year\">{georgianToPersianDigits(year)}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ));\n  } else {\n    return (\n      <div className={props.newspaper ? \"posts newspaper\" : \"posts\"}>\n        {data.map((node) => {\n          return (\n            <Post\n              key={node.id}\n              node={node}\n              query={query}\n              prefix={prefix}\n              hideDate={hideDate}\n              yearOnly={yearOnly}\n              {...props}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n};\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\nimport { useGetTaxonomies } from '../utils/hooks/useGetTaxonomies'\n\nexport const BlogSidebar = () => {\n  const data = useGetTaxonomies()\n  const categories = data.categories.group\n  const tags = data.tags.group\n\n  return (\n    <aside className=\"post-sidebar\">\n      <div className=\"post-sidebar-card\">\n        <h2>دسته بندی ها</h2>\n        <div className=\"list\">\n          {categories\n            .filter((category) => category.name !== 'Highlight')\n            .map((category) => {\n              return (\n                <Link\n                  key={category.name}\n                  to={`/categories/${slugify(category.name)}`}\n                  className=\"category\"\n                  activeClassName=\"active\"\n                >\n                  <div className=\"name\">{category.name}</div>\n                  <div className=\"count\">{category.totalCount}</div>\n                </Link>\n              )\n            })}\n        </div>\n      </div>\n\n      <div className=\"post-sidebar-card\">\n        <h2>تگ‌ها</h2>\n        <div className=\"tags\">\n          {tags.map((tag) => {\n            return (\n              <Link\n                key={tag.name}\n                to={`/tags/${slugify(tag.name)}`}\n                className=\"tag\"\n                activeClassName=\"active\"\n              >\n                {tag.name}\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </aside>\n  )\n}\n","import React from 'react'\n\nimport { BlogSidebar } from './BlogSidebar'\n\nexport const SidebarLayout = ({ children }) => {\n  return (\n    <section className=\"container markdown-content\">\n      <div className=\"grid\">\n        <div className=\"article-content\">{children}</div>\n        <div className=\"sidebar-content\">\n          <BlogSidebar />\n        </div>\n      </div>\n    </section>\n  )\n}\n","import React, { useMemo } from \"react\";\nimport Helmet from \"react-helmet\";\n\nimport { Layout } from \"../components/Layout\";\nimport { SEO } from \"../components/SEO\";\nimport { Posts } from \"../components/Posts\";\nimport { Hero } from \"../components/Hero\";\nimport { SidebarLayout } from \"../components/SidebarLayout\";\nimport { georgianToPersianDigits, getSimplifiedPosts } from \"../utils/helpers\";\nimport config from \"../utils/config\";\nimport { graphql } from \"gatsby\";\n\nexport default function TagTemplate({ data, pageContext }) {\n  const { tag } = pageContext;\n  const { totalCount } = data.allMarkdownRemark;\n  const posts = data.allMarkdownRemark.edges;\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts]);\n  const message = totalCount === 1 ? \" پست تگ شده با:\" : \" پست های تگ شده با:\";\n\n  return (\n    <div>\n      <Helmet title={`Posts tagged: ${tag} | ${config.siteTitle}`} />\n      <SEO />\n\n      <SidebarLayout>\n        <Hero\n          highlight={georgianToPersianDigits(totalCount)}\n          subTitle={message}\n          title={tag}\n        />\n        <Posts data={simplifiedPosts} showYears />\n      </SidebarLayout>\n    </div>\n  );\n}\n\nTagTemplate.Layout = Layout;\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            slug\n            date\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useStaticQuery, graphql } from 'gatsby'\n\nexport const useGetTaxonomies = () => {\n  const data = useStaticQuery(graphql`\n    query TaxonomyQuery {\n      tags: allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          name: fieldValue\n          totalCount\n        }\n      }\n\n      categories: allMarkdownRemark {\n        group(field: frontmatter___categories) {\n          name: fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  return data\n}\n"],"names":["Hero","highlight","subTitle","title","children","index","className","Post","formattedDate","node","prefix","newspaper","console","log","date","getFormattedDate","dateArr","split","parseInt","monthsEnum","Link","to","slug","key","id","shortTitle","georgianToPersianDigits","Posts","data","showYears","query","hideDate","yearOnly","props","postsByYear","useMemo","collection","forEach","post","year","years","Object","keys","reverse","map","BlogSidebar","useGetTaxonomies","categories","group","tags","filter","category","name","slugify","activeClassName","totalCount","tag","SidebarLayout","TagTemplate","pageContext","allMarkdownRemark","posts","edges","simplifiedPosts","getSimplifiedPosts","message","config","Layout","useStaticQuery"],"sourceRoot":""}